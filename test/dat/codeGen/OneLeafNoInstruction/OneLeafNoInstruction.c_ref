~/**
~ * File generated with GEGELATI vX.Y.Z
~ * On the AAAA-MM-DD HH:MM:SS
~ * With the <generator class name>.
~ */

#include "OneLeafNoInstruction.h"
#include "OneLeafNoInstruction_program.h"
#include <limits.h>
#include <assert.h>
#include <float.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdint.h>
#include <math.h>

int bestProgram(double *results, int nb) {
	int bestProgram = 0;
	double bestScore = (isnan(results[0]))? -INFINITY : results[0];
	for (int i = 1; i < nb; i++) {
		double challengerScore = (isnan(results[i]))? -INFINITY : results[i];
		if (challengerScore >= bestScore) {
			bestProgram = i;
			bestScore = challengerScore;
		}
	}
	return bestProgram;
}

enum vertices {A0, T1, };

void inferenceTPG(int* action) {
	enum vertices currentVertex = T1;
	*action = INT_MIN;
	while(*action == INT_MIN) {
		switch (currentVertex) {
		case A0: {
			*action = 1;
			break;
		}
		case T1: {
			const enum vertices next[1] = { A0,  };

			double T1Scores[1];

			T1Scores[0] = P0();

			int best = bestProgram(T1Scores, 1);
			currentVertex = next[best];
			break;
		}
		}
	}
}
